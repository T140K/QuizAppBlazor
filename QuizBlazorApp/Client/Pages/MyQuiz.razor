@page "/myquiz"
@using QuizBlazorApp.Shared.ViewModels
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient _httpClient

<PageTitle>My Quizzes</PageTitle>

<h2>Welcome, @userName!</h2>

@if (quizViewModel == null)
{
    <p>You dont have any quizzes, you should make some!</p>
}
else
{
    <h4>Here are your quizes</h4>
    @foreach (var quiz in quizViewModel)
    {
        <div style="border: 1px solid black; padding: 2px; padding-left: 5px; width:auto; padding-bottom: 10px; margin: 5px;">
            <h5>@quiz.QuizName</h5>
            <ul>
                @foreach (var question in quiz.Questions)
                {
                    <li>
                        <strong>@question.QuestionName</strong>
                        <ul>
                            @foreach (var answer in question.Answers)
                            {
                                @if (@answer.CorrectAnswer == true)
                                {
                                    <li><strong>@answer.AnswerTitle</strong></li>
                                }
                                else
                                {
                                    <li>@answer.AnswerTitle</li>
                                }
                            }
                        </ul>
                    </li>
                }
            </ul>
        </div>
    }
}

@code {
    private string userName;
    private QuizViewModel[] quizViewModel;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userName = user.Identity?.Name;

        await LoadUserQuizData();
    }

    private async Task LoadUserQuizData()
    {
        try
        {
            var response = await _httpClient.GetAsync("/api/quiz/userquiz");
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(jsonString))
                {
                    Console.WriteLine("jsonString is null or empty");
                }

                quizViewModel = JsonSerializer.Deserialize<QuizViewModel[]>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });            }
            else
            {
                Console.WriteLine("API request failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Getting quiz data failed {ex.Message}");
        }
    }
}
